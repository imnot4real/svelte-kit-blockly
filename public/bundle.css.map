{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte",
    "BlocklyComponent.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import BlocklyComponent from \"./components/BlocklyComponent.svelte\";\n</script>\n\n<style>\n  #app {\n    font-family: \"Avenir\", Helvetica, Arial, sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    text-align: center;\n    color: #2c3e50;\n  }\n</style>\n\n<div id=\"app\">\n  <BlocklyComponent/>\n</div>",
    "<script>\n  import * as Blockly from 'blockly';\n  import { blocks } from '../blocks/text';\n  import { forBlock } from '../generators/javascript';\n  import { pythonGenerator } from 'blockly/python';\n  import { save, load } from '../serialization';\n  import { toolbox } from '../toolbox';\n\n  let ws;\n\n  // Register the blocks and generator with Blockly\n  Blockly.common.defineBlocks(blocks);\n  Object.assign(pythonGenerator.forBlock, forBlock);\n\n  // Function to reset code and output divs, show generated code, and eval it\n  const runCode = () => {\n    const code = pythonGenerator.workspaceToCode(ws);\n    document.getElementById('generatedCode').innerText = code;\n    document.getElementById('output').innerHTML = '';\n  };\n\n  // Lifecycle hook to set up Blockly when the component is mounted\n  import { onMount } from 'svelte';\n  onMount(() => {\n    ws = Blockly.inject('blocklyDiv', { toolbox });\n    load(ws);\n    runCode();\n\n    // Save changes and run code when workspace state changes\n    ws.addChangeListener((e) => {\n      if (!e.isUiEvent) {\n        save(ws);\n        if (\n          e.type !== Blockly.Events.FINISHED_LOADING &&\n          !ws.isDragging()\n        ) {\n          runCode();\n        }\n      }\n    });\n  });\n</script>\n\n<style>\n  #pageContainer {\n    display: flex;\n    width: 100%;\n    height: 100vh;\n  }\n\n  #blocklyDiv {\n    flex-grow: 1;\n    min-width: 600px;\n    height: 100%;\n  }\n\n  #outputPane {\n    display: flex;\n    flex-direction: column;\n    width: 400px;\n    overflow: auto;\n    margin: 1rem;\n  }\n\n  #generatedCode {\n    height: 50%;\n    background-color: rgb(247, 240, 228);\n  }\n\n  #output {\n    height: 50%;\n  }\n</style>\n\n<!-- HTML structure for Blockly workspace and output -->\n<div id=\"pageContainer\">\n  <div id=\"blocklyDiv\"></div>\n  <div id=\"outputPane\">\n    <div id=\"generatedCode\"></div>\n    <div id=\"output\"></div>\n  </div>\n</div>\n"
  ],
  "names": [],
  "mappings": "AAKE,IAAI,eAAC,CAAC,AACJ,WAAW,CAAE,QAAQ,CAAC,CAAC,SAAS,CAAC,CAAC,KAAK,CAAC,CAAC,UAAU,CACnD,sBAAsB,CAAE,WAAW,CACnC,uBAAuB,CAAE,SAAS,CAClC,UAAU,CAAE,MAAM,CAClB,KAAK,CAAE,OAAO,AAChB,CAAC;ACiCD,cAAc,cAAC,CAAC,AACd,OAAO,CAAE,IAAI,CACb,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,KAAK,AACf,CAAC,AAED,WAAW,cAAC,CAAC,AACX,SAAS,CAAE,CAAC,CACZ,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,IAAI,AACd,CAAC,AAED,WAAW,cAAC,CAAC,AACX,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,KAAK,CAAE,KAAK,CACZ,QAAQ,CAAE,IAAI,CACd,MAAM,CAAE,IAAI,AACd,CAAC,AAED,cAAc,cAAC,CAAC,AACd,MAAM,CAAE,GAAG,CACX,gBAAgB,CAAE,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,AACtC,CAAC,AAED,OAAO,cAAC,CAAC,AACP,MAAM,CAAE,GAAG,AACb,CAAC"
}